{"version":3,"sources":["components/cryptoTable.tsx","components/converter.tsx","styles/styles.ts","App.tsx","stores/currenciesStore.ts","stores/converterStore.ts","stores/index.ts","index.tsx"],"names":["CryptoTable","inject","observer","classes","currenciesStore","converterStore","items","getItems","diffObj","getDiffObj","React","useEffect","getCoins","TableContainer","component","Paper","Table","className","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","onClick","coin","setSelectedCoin","hover","key","name","scope","imgCoin","src","imgUrl","fullName","price","volume24","reducer","state","action","type","payload","value","String","Number","inPrice","outPrice","in","out","Converter","coins","useState","selectedCoin","getSelectedCoin","find","obj","useReducer","value1","value2","dispatch","paper","cryptoInputBox","FormControl","currencyInput","TextField","onChange","e","target","label","currencyType","InputLabel","id","Select","MenuItem","useStyles","makeStyles","theme","createStyles","root","padding","spacing","backgroundColor","textAlign","color","palette","text","secondary","display","justifyContent","marginBottom","minWidth","width","height","borderRadius","greenPrice","redPrice","App","Container","maxWidth","Grid","container","item","xs","CurrenciesStore","arr1","arr2","filter","index","this","observable","computed","diffCurrencies","reduce","initObj","newObj","o","oldObj","itemObj","axios","get","then","data","Data","CoinInfo","Name","FullName","ImageUrl","RAW","USD","PRICE","parseInt","VOLUME24HOUR","setItems","ConverterStore","stores","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fce28a48.chunk.js","sourcesContent":["import React, {FC, useEffect} from 'react'\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport {AllCoinsType, TCoinDiff} from \"../types/types\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport CurrenciesStore from \"../stores/currenciesStore\";\r\nimport ConverterStore from \"../stores/converterStore\";\r\n\r\n\r\ntype CryptoTableType = {\r\n    classes: any,\r\n    currenciesStore?: CurrenciesStore\r\n    converterStore?: ConverterStore\r\n}\r\n\r\n\r\nconst CryptoTable = inject('currenciesStore', 'converterStore')(\r\n    observer(({classes, currenciesStore, converterStore}: CryptoTableType) => {\r\n\r\n            const items: Array<AllCoinsType> = currenciesStore!.getItems\r\n            const diffObj: TCoinDiff = currenciesStore!.getDiffObj\r\n\r\n            React.useEffect(() => {\r\n                if (currenciesStore) {\r\n                    currenciesStore.getCoins();\r\n                    /*setInterval(()=> {\r\n                        currenciesStore.getCoins();\r\n                    }, 30 * 1000)*/\r\n                }\r\n            }, [])\r\n\r\n\r\n            const onClickSelectedCoin = (coin: AllCoinsType) => {\r\n                if(converterStore) {\r\n                    converterStore.setSelectedCoin(coin);\r\n                }\r\n            }\r\n\r\n\r\n            return (\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"left\"></TableCell>\r\n                                <TableCell>Full name</TableCell>\r\n                                <TableCell align=\"left\">Name</TableCell>\r\n                                <TableCell align=\"left\">Price</TableCell>\r\n                                <TableCell align=\"left\">Volume 24h</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {items.map((row) => (\r\n                                <TableRow onClick={()=> onClickSelectedCoin(row)} hover key={row.name}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        <img className={classes.imgCoin} src={row.imgUrl}/>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{row.fullName}</TableCell>\r\n                                    <TableCell align=\"left\">{row.name}</TableCell>\r\n\r\n\r\n                                    <TableCell\r\n                                        className={diffObj[row.name] && classes[`${diffObj[row.name]}Price`]}\r\n                                        align=\"left\">${row.price}</TableCell>\r\n\r\n\r\n                                    <TableCell align=\"left\">{row.volume24}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            )\r\n        }\r\n    )\r\n)\r\nexport default CryptoTable;","import React, {ChangeEvent, FC} from 'react'\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport {MenuItem} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport CurrenciesStore from \"../stores/currenciesStore\";\r\nimport ConverterStore from \"../stores/converterStore\";\r\n\r\n\r\ntype ConverterType = {\r\n    classes: any,\r\n    currenciesStore?: CurrenciesStore\r\n    converterStore?: ConverterStore\r\n}\r\ntype StateReducerType = {\r\n    value1: any,\r\n    value2: any,\r\n    inPrice: any,\r\n    outPrice: number\r\n}\r\ntype SetValue1Action = {\r\n    type: string;\r\n    payload: string\r\n}\r\n\r\n\r\nconst reducer = (state: StateReducerType, action: any): StateReducerType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET_VALUE':\r\n            return {\r\n                ...state,\r\n                [action.payload.name]: action.payload.value,\r\n                value2: String(Number(action.payload.value) * state.inPrice / state.outPrice)\r\n            }\r\n        case 'SET_PRICES':\r\n            return {\r\n                ...state,\r\n                inPrice: action.payload.in,\r\n                outPrice: action.payload.out,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nconst Converter: FC<ConverterType> = inject('currenciesStore', 'converterStore')(\r\n    observer(({classes, currenciesStore, converterStore}) => {\r\n\r\n            const coins: Array<string> = currenciesStore!.getItems.map(coin => coin.name)\r\n        \r\n            const [selectedCoin, setSelectedCoin] = React.useState('USD');\r\n            const inPrice = Number(converterStore?.getSelectedCoin.price) || 0\r\n            const outPrice = Number(currenciesStore!.getItems.find(obj => obj.name === selectedCoin)?.price) || 0\r\n\r\n\r\n            const [state, dispatch] = React.useReducer(reducer, {\r\n                value1: '',\r\n                value2: '',\r\n                inPrice,\r\n                outPrice,\r\n            });\r\n            React.useEffect(() => {\r\n                dispatch({\r\n                    type: 'SET_PRICES',\r\n                    payload: {\r\n                        in: inPrice,\r\n                        out: outPrice\r\n                    }\r\n                })\r\n            }, [inPrice, outPrice])\r\n\r\n\r\n            const onChangeUpdateField = (name: string, value: string) => {\r\n                dispatch({\r\n                    type: 'SET_VALUE',\r\n                    payload: {\r\n                        name,\r\n                        value\r\n                    }\r\n                })\r\n            }\r\n\r\n            return (\r\n                <Paper className={classes.paper}>\r\n                    <div className={classes.cryptoInputBox}>\r\n                        <FormControl className={classes.currencyInput}>\r\n                            <TextField value={state.value1}\r\n                                       onChange={(e: any) => onChangeUpdateField('value1', e.target.value)} label=\"value\"/>\r\n                        </FormControl>\r\n                        <FormControl className={classes.currencyType}>\r\n                            <InputLabel id=\"demo-simple-select-label\">\r\n                                Currency\r\n                            </InputLabel>\r\n                            <Select value={converterStore?.getSelectedCoin.name || ''}>\r\n                                {\r\n                                    coins.map(name => <MenuItem value={name}>{name}</MenuItem>)\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className={classes.cryptoInputBox}>\r\n                        <FormControl className={classes.currencyInput}>\r\n                            <TextField value={state.value2} label=\"value\"/>\r\n                        </FormControl>\r\n                        <FormControl className={classes.currencyType}>\r\n                            <InputLabel id=\"demo-simple-select-label\">\r\n                                Currency\r\n                            </InputLabel>\r\n                            <Select onChange={(e: any) => setSelectedCoin(e.target.value)} value={selectedCoin}>\r\n                                <MenuItem value='USD'>USD</MenuItem>\r\n                                {\r\n                                    coins.map(name => <MenuItem value={name}>{name}</MenuItem>)\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </Paper>\r\n            )\r\n        }\r\n    )\r\n)\r\n\r\nexport default Converter;","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: theme.spacing(10),\r\n            backgroundColor: '#D2B48C'\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n            backgroundColor: '#F5DEB3'\r\n        },\r\n        cryptoInputBox: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            marginBottom: '20px',\r\n\r\n        },\r\n        currencyInput: {\r\n            minWidth: \"calc(70% - 10px)\",\r\n        },\r\n        currencyType: {\r\n            minWidth: \"30%\",\r\n        },\r\n        table: {\r\n            minWidth: 650,\r\n            backgroundColor: '#F5DEB3'\r\n        },\r\n        imgCoin: {\r\n            width: '30px',\r\n            height: '30px',\r\n            borderRadius: 30\r\n        },\r\n         greenPrice : {\r\n             backgroundColor: '#98FB98'\r\n         },\r\n        redPrice: {\r\n            backgroundColor: '#CD5C5C'\r\n        }\r\n\r\n    }),\r\n);","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport CryptoTable from \"./components/cryptoTable\";\nimport Converter from \"./components/converter\";\nimport {useStyles} from \"./styles/styles\";\n\n\nconst App = () => {\n\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.root} maxWidth=\"lg\">\n            <Grid container spacing={3}>\n                <Grid item xs={8}>\n                    <CryptoTable classes={classes}/>\n                </Grid>\n                <Grid item xs={4}>\n                    <Converter classes={classes}/>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default App;","import {action, computed, observable} from \"mobx\";\r\nimport {AllCoinsType, TCoinDiff} from \"../types/types\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass CurrenciesStore {\r\n    @observable private items: Array<AllCoinsType> = []\r\n    @observable private diffObj: TCoinDiff = {}\r\n\r\n    @computed\r\n    get getItems() {\r\n        return this.items;\r\n    }\r\n\r\n    @computed\r\n    get getDiffObj() {\r\n        return this.diffObj;\r\n    }\r\n\r\n    @action\r\n    setItems = (items: Array<AllCoinsType>): void => {\r\n        this.diffObj = this.diffCurrencies(this.items, items).reduce(\r\n            (initObj: TCoinDiff, obj: AllCoinsType) => {\r\n                const newObj = items.find(o => o.name === obj.name)!;\r\n                const oldObj:AllCoinsType = this.items.find(itemObj => itemObj.name === newObj.name)!;\r\n                const color: string = newObj.price === oldObj.price ? '' : newObj.price > oldObj.price ? 'green' : 'red';\r\n\r\n                initObj[newObj.name] = color;\r\n\r\n                return initObj\r\n            },\r\n            {}\r\n            )\r\n        this.items = items;\r\n    };\r\n\r\n    @action\r\n    getCoins = () => {\r\n        axios.get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD')\r\n            .then(({data}) => {\r\n                const coins = data.Data.map((obj: any) => {\r\n                    const coin = {\r\n                        name: obj.CoinInfo.Name,\r\n                        fullName: obj.CoinInfo.FullName,\r\n                        imgUrl: `https://cryptocompare.com/${obj.CoinInfo.ImageUrl}`,\r\n                        price: obj.RAW.USD.PRICE,\r\n                        volume24: parseInt(obj.RAW.USD.VOLUME24HOUR)\r\n                    }\r\n                    return coin\r\n                })\r\n                this.setItems(coins)\r\n            })\r\n    }\r\n\r\n    diffCurrencies(arr1: Array<AllCoinsType>, arr2: Array<AllCoinsType>) {\r\n        return arr1.filter((obj, index) => {\r\n            if (obj.price !== arr2[index].price) {\r\n                return true\r\n            }\r\n            return false\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default CurrenciesStore","import {action, computed, observable} from \"mobx\";\r\nimport {AllCoinsType} from \"../types/types\";\r\n\r\n\r\n\r\nexport type SelectedCoinType = {\r\n    name: string,\r\n    price: number\r\n}\r\n\r\nclass ConverterStore {\r\n\r\n    @observable private selectedCoin: SelectedCoinType = {\r\n        name: 'string',\r\n        price: 0\r\n    }\r\n\r\n    @computed\r\n    get getSelectedCoin() {\r\n        return this.selectedCoin;\r\n    }\r\n\r\n    @action\r\n    setSelectedCoin(coin: AllCoinsType) {\r\n         this.selectedCoin = {\r\n            name: coin.name,\r\n            price: coin.price\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default ConverterStore","import CurrenciesStore from './currenciesStore'\r\nimport ConverterStore from './converterStore'\r\n\r\nexport const stores = {\r\n    currenciesStore: new CurrenciesStore(),\r\n    converterStore: new ConverterStore(),\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"mobx-react\";\nimport {stores} from \"./stores\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider {...stores}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}